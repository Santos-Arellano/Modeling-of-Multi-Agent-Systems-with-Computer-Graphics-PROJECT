- 5  robots  nuevos
- un  almacén  lleno  de  objetos
- desordenados
- Pueden  recoger  objetos  en  celdas  de cuadrícula frente a ellos con sus manipuladores
- luego llevarlas a otra ubicación
- construir pilas  de  hasta cinco  objetos.
- distinguir si un campo está libre, es una pared, contiene una pila de objetos (y cuantos objetos hay en la pila) o está ocupado por otro robot. 
- Los robots saben  si  llevan  un  objeto  en  ese  momento o no  
- Estos  Robots  también  tienen  capacidad  de llevar un mapa consigo.



Realiza la siguiente simulación: 
o Inicializa las posiciones iniciales de los K objetos. Todos los objetos están a nivel de 
piso, es decir, no hay pilas de objetos. 
o Todos los agentes empiezan en posición aleatorias vacías. 
o Se ejecuta el tiempo máximo establecido (o steps máximos). 
• Deberás recopilar la siguiente información durante la ejecución: 
o Tiempo necesario hasta que todos los objetos están en pilas de máximo 5 objetos. 
o Número de movimientos realizados por cada robot. 
o Analiza si existe una estrategia que podría disminuir el tiempo dedicado, así como 
la cantidad de movimientos realizados. ¿Cómo sería? Descríbela. 
• Puntos para tomar en cuenta: 
o Los robots solo pueden operar con razonamiento deductivo, razonamiento 


la chatcito ontologia:
To identify ontology in this multi-agent system context, let's break down the key entities, properties, and relationships involved:

### Entities:
1. Robots:
   - Properties:
     - `ID`: Unique identifier for each robot.
     - `Location`: Current position on the grid.
     - `Carrying Object`: Boolean indicating whether the robot is currently carrying an object.
     - `Map`: A representation of the environment known to the robot.
   - Capabilities:
     - `Pick Up Object`: Ability to pick up objects from the grid.
     - `Move`: Ability to navigate to different grid cells.
     - `Place Object`: Ability to place objects at a new location.
     - `Stack Objects`: Ability to create a stack of up to five objects.
     - `Detect Environment`: Ability to distinguish between free cells, walls, object piles (and count), and other robots.

2. Objects:
   - Properties:
     - `Type`: Type of object (could be generic or specific types).
     - `Location`: Current position on the grid.
     - `Stack Size`: Number of objects in the stack (up to five).
   
3. Grid Cells ->Place??
   - Properties:
     - `Location`: Specific coordinates in the grid.
     - `Status`: Whether the cell is free, contains a wall, an object pile (and how many), or is occupied by a robot.

4. Warehouse ->Position??
   - Properties:
     - `Size`: Dimensions of the grid.
     - `Initial Object Distribution`: Layout of objects at the start.

### Relationships:
1. Robot to Grid Cell:
   - A robot is `Located At` a specific grid cell.
   - A robot can `Move To` a grid cell.
   - A robot can `Pick Up` objects from a grid cell.
   - A robot can `Place` objects in a grid cell.

2. Object to Grid Cell:
   - Objects are `Located At` specific grid cells.
   - Objects can be `Stacked` at a grid cell.

3. Robot to Object:
   - A robot can `Carry` an object.
   - A robot can `Place` an object.

4. Grid Cell to Warehouse:
   - Each grid cell is a `Part Of` the warehouse grid.

### Ontology:
The ontology can be structured by defining classes (e.g., `Robot`, `Object`, `GridCell`, `Warehouse`) and their properties (e.g., `Location`, `Status`, `Carrying Object`). The relationships (e.g., `Located At`, `Part Of`, `Carry`, `Move To`) can be modeled as associations between these classes.

This ontology can then be used to create a knowledge base that the robots use to make decisions and interact with their environment.